# -*- coding: utf-8 -*-
"""dvc_data_analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101RtVBtyXb5zzXJUx_FTYeoZiaEq0YNk
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn.linear_model as lm

import plotly.graph_objects as go
from calendar import timegm
from datetime import datetime
from datetime import date
from queue import PriorityQueue

col_names=['date', 'hospital_name', 'total_num_beds', 'used_num_beds',
           'total_num_vents', 'used_num_vents','num_adm', 'num_dis']

url = 'https://raw.githubusercontent.com/CharlesJu/dvc_hackathon/master/TestCases.csv'
df = pd.read_csv(url, names = col_names)
pd.to_datetime(df['date'])

from calendar import timegm

TIME_FORMAT = '%Y-%m-%d %H:%M:%S'

def datetime_to_epoch(time):
    timestamp = datetime.strptime(str(time),TIME_FORMAT)
    epoch = int(timestamp.timestamp())
    return epoch

def epoch_to_datetime(time):
    t = datetime.fromtimestamp(time)
    return t.strftime(TIME_FORMAT)

def get_time(epoch):
    t = datetime.fromtimestamp(epoch)
    return t.time()

def get_hour(epoch):
    t = datetime.fromtimestamp(epoch)
    return t.hour

def get_minute(epoch):
    t = datetime.fromtimestamp(epoch)
    return t.minute

def get_date(epoch):
    t = datetime.fromtimestamp(epoch)
    return t.date()

dddates = df.date
temp_date = np.empty(len(dddates))
for i in range(len(dddates)):
  #date = time_to_timeformat(df.date[i])
  date = '{} 00:00:00'.format(df.date[i])
  temp_date[i] = datetime_to_epoch(date)

x_time = np.empty(int(len(temp_date)/3))
##Variable for number of hospitals-3 in this case
for i in range(0, len(x_time), 3):
  x_time[i] = temp_date[i]

s = len(x_time)
arr = np.empty(s*2)

for i in range(len(arr)):
  if i<s:
    arr[i] = i
  else:
    arr[i] = x_time[i-s]

x_time = np.reshape(arr, (s,2))

ge = df.groupby('hospital_name')
stan_df = ge.get_group('Stanford')
lou_df = ge.get_group('St. Louis')
# ocon_df = ge.get_group('O\'Connor')

def linreg(col_of_comp):
  temp_df = ge.get_group(MY_HOSPITAL)
  y = temp_df[col_of_comp]
  regr = lm.LinearRegression()
  regr.fit(x_time, y)
  coef = regr.coef_
  intercept = regr.intercept_
  return coef, intercept

# c,i = linreg('used_num_beds')
# print(c[0])

MY_HOSPITAL = 'Stanford'
today = datetime.today().date()

def plotScatterplot():
  #plotting individual points
  scatterplot = go.Figure()
  scatterplot.add_trace(go.Scatter(x = df.loc[df['hospital_name'] == MY_HOSPITAL, 'date'], y = df.loc[df['hospital_name'] == MY_HOSPITAL, 'used_num_beds'], mode = 'markers', name = 'Individual points'))

  #creating mini dataframe to plot our LSRL
  ourLine = pd.DataFrame(columns = ["x_values", "y_values"])
  ourLine.set_index("x_values")

  temp_df = df.loc[df['hospital_name']== MY_HOSPITAL, ['date']]

  # LSR Line Calculation
  m, y_intercept = linreg('used_num_beds')
  slope = m[1]
    
  # earliest time with recorded data for MY_HOSPITAL
  temp_df.sort_values(by=['date'])
  earliest = temp_df.at[0, 'date']
  earliest = '{} 00:00:00'.format(earliest)
  ourLine.at[earliest, "x_values"] = earliest
  #feed earliet date into LSRL
  ourLine.at[earliest, "y_values"] = (datetime_to_epoch(earliest) * slope) + y_intercept

  
  # do the same with latest time with recorded data for MY_HOSPITAL
  latest = temp_df.at[(len(temp_df['date']) - 1)*3, 'date']
  latest = '{} 00:00:00'.format(latest)
  ourLine.at[latest, "x_values"] = latest
  #feed latest date into LSRL
  ourLine.at[latest, "y_values"] = (datetime_to_epoch(latest) * slope) + y_intercept

  #plotting LSRL
  scatterplot.add_trace(go.Scatter(x = ourLine["x_values"], y = ourLine["y_values"], mode = 'lines+markers', name = 'LSRL'))

  # Adding labels to our axes
  scatterplot.update_layout(
      title="Bed Occupancy Per Day",
      xaxis_title="Date",
      yaxis_title="Number of Beds Occupied",
    )

  scatterplot.write_html("./webapp/app/templates/testGraphs.html")

plotScatterplot()

def calcBedImpactRate():

    global bedImpactRates
    bedImpactRates = PriorityQueue()

    # test value since our collection of test cases doesn't actually include the current date (oops)
    today = '2020-03-04'

    for ind in df.index:
        if df.at[ind, 'date'] == today:
            val = float(df.at[ind, 'used_num_beds']) / df.at[ind, 'total_num_beds']
            bedImpactRates.put(val)

def generateBedPercentile():

    ourRate = 0
    for ind in df.index:
        if df.at[ind, 'date'] == today and df.at[ind, 'hospital_name'] == MY_HOSPITAL:
            ourRate = float(df.at[ind, 'used_num_beds']) / df.at[ind, 'total_num_beds']
            break

    ourRank = 0
    temp = PriorityQueue()
    while not bedImpactRates.empty():
        elem = bedImpactRates.get()
        temp.put(elem)
        if elem == ourRate:
            break
        ourRank = ourRank + 1

    # recovering values lost in iteration of bedImpactRates
    while not temp.empty():
        elem = temp.get()
        bedImpactRates.put(elem)

    Message = "Out of " + str(bedImpactRates.qsize()) + " hospitals in your area, you have a greater percentage of beds in use than " + str(ourRank) + " hospital(s)."
    print(Message)

def calcVentImpactRate():

    global ventImpactRates
    ventImpactRates = PriorityQueue()

    # test value since our collection of test cases doesn't actually include the current date (oops)
    today = '2020-03-04'
    #today = date.today()

    for ind in df.index:
        if df.at[ind, 'date'] == today:
            val = float(df.at[ind, 'used_num_vents']) / df.at[ind, 'total_num_vents']
            ventImpactRates.put(val)

def generateVentPercentile():

    ourRate = 0
    for ind in df.index:
        if df.at[ind, 'date'] == today and df.at[ind, 'hospital_name'] == MY_HOSPITAL:
            ourRate = float(df.at[ind, 'used_num_vents']) / df.at[ind, 'total_num_vents']
            break

    ourRank = 0
    temp = PriorityQueue()
    while not ventImpactRates.empty():
        elem = ventImpactRates.get()
        temp.put(elem)
        if elem == ourRate:
            break
        ourRank = ourRank + 1

    # recovering values lost in iteration of bedImpactRates
    while not temp.empty():
        elem = temp.get()
        ventImpactRates.put(elem)

    Message = "Out of " + str(ventImpactRates.qsize()) + " hospitals in your area, you have a greater percentage of ventilators in use than " + str(ourRank) + " hospital(s)."
    print(Message)

def getAveBedFillupRate():
    
    global aveBedFillupRate
    bedFillupRates = []

    for ind in df.index:
        if df.at[ind, 'date'] == today:
            val = float(df.at[ind, 'num_adm'] - df.at[ind, 'num_dis']) / df.at[ind, 'total_num_beds']
            bedFillupRates.append(val)

    sum = 0
    for val in bedFillupRates:
        sum += val

    aveBedFillupRate = float(sum) / len(bedFillupRates)

def compareBedFillupRate():

    ourRate = 0
    for ind in df.index:
        if df.at[ind, 'date'] == today and df.at[ind, 'hospital_name'] == MY_HOSPITAL:
            ourRate = float(df.at[ind, 'num_adm'] - df.at[ind,'num_dis']) / df.at[ind, 'total_num_beds']
            break

    Message = "Your hospital's beds are filling up " + str((ourRate - aveBedFillupRate) / aveBedFillupRate * 100) + "% faster that the average in your area."
    print(Message)
